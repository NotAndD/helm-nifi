---
{{- $containerPort := .Values.properties.httpsPort }}
{{- $containerPortName := printf "https" }}
{{- if eq (include "apache-nifi.isInternalSecure" .) "false" }}
  {{- $containerPort = .Values.properties.httpPort }}
  {{- $containerPortName = printf "http" }}
{{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "apache-nifi.fullname" . }}
  labels:
    app: {{ include "apache-nifi.name" . | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  # Parallel podManagementPolicy for faster bootstrap and teardown. OrderedReady(default) is not recommended here.
  podManagementPolicy: Parallel
  serviceName: {{ template "apache-nifi.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apache-nifi.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ (.Files.Glob "configs/*").AsConfig | sha256sum | quote }}
{{- if .Values.sts.pod.annotations }}
{{ toYaml .Values.sts.pod.annotations | indent 8 }}
{{- end }}
      labels:
        app: {{ include "apache-nifi.name" . | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
{{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 8 }}
{{- end }}
    spec:
{{- if .Values.sts.useHostNetwork }}
      hostNetwork: {{ .Values.sts.useHostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
{{- if .Values.sts.hostAliases }}
      hostAliases:
{{ toYaml .Values.sts.hostAliases | indent 8 }}
{{- end }}
      serviceAccountName: {{ include "apache-nifi.serviceAccountName" . }}
      {{- if eq .Values.sts.AntiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "apache-nifi.name" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      {{- else if eq .Values.sts.AntiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                         - {{ include "apache-nifi.name" . | quote }}
                 topologyKey: "kubernetes.io/hostname"
      {{- end }}
{{- if and .Values.affinity (and (ne .Values.sts.AntiAffinity "hard") (ne .Values.sts.AntiAffinity "soft")) }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        sysctls:
          - name: net.ipv4.ip_local_port_range
            value: "10000 65000"
      initContainers:
{{- if .Values.properties.isNode }}
      - name: zookeeper
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        command:
        - sh
        - -c
        - |
          echo trying to contact {{ template "zookeeper.server" . }} {{ .Values.zookeeper.port }}
          until nc -vzw 1 {{ template "zookeeper.server" . }} {{ .Values.zookeeper.port }}; do
            echo "waiting for zookeeper..."
            sleep 2
          done
{{- end }}
{{- range $key, $value := .Values.initContainers }}
      - name: {{ $key }}
{{ toYaml $value | indent 8 }}
{{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
{{- if .Values.extraContainers }}
{{- toYaml .Values.extraContainers | nindent 6 }}
{{- end }}
      - name: server
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command:
        - bash
        - -ce
        - |
          prop_replace () {
            target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
            echo "updating ${1} in ${target_file}"
            if egrep "^${1}=" ${target_file} &> /dev/null; then
              sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
            else
              echo ${1}=${2} >> ${target_file}
            fi
          }
          mkdir -p ${NIFI_HOME}/config-data/conf
{{- if .Values.sts.useHostNetwork }}
          FQDN="0.0.0.0"
{{- else }}
          FQDN=$(hostname -f)
{{- end }}

          mv "${NIFI_HOME}/conf/nifi.properties" "${NIFI_HOME}/conf/nifi.properties.old"
          mv "${NIFI_HOME}/conf/authorizers.xml" "${NIFI_HOME}/conf/authorizers.xml.old"

          cat "${NIFI_HOME}/conf/nifi.properties.temp" > "${NIFI_HOME}/conf/nifi.properties"
          cat "${NIFI_HOME}/conf/authorizers.xml.temp" > "${NIFI_HOME}/conf/authorizers.xml"

          cat "${NIFI_HOME}/conf/login-identity-providers-custom.xml" > "${NIFI_HOME}/conf/login-identity-providers.xml"
{{- if and (not (.Values.auth.ldap.enabled)) .Values.auth.singleUser.enabled }}
          bin/nifi.sh set-single-user-credentials {{ .Values.auth.singleUser.username }} {{ .Values.auth.singleUser.password }}
{{- end }}

{{ if .Values.customFlow }}
          gzip < {{ .Values.customFlow }} > /opt/nifi/data/flow.json.gz
{{ else }}
          if ! test -f /opt/nifi/data/flow.json.gz && test -f /opt/nifi/nifi-init/flow.json; then
            gzip /opt/nifi/nifi-init/flow.json -c > /opt/nifi/data/flow.json.gz
            echo "/opt/nifi/data/flow.json.gz have been initialized using the default flow.json file."
            gzip -d -c /opt/nifi/data/flow.json.gz
          fi
{{ end }}

          prop_replace nifi.ui.banner.text $(hostname -s)
          prop_replace nifi.remote.input.host ${FQDN}
          prop_replace nifi.cluster.node.address ${FQDN}
          prop_replace nifi.zookeeper.connect.string ${NIFI_ZOOKEEPER_CONNECT_STRING}
          prop_replace nifi.web.http.host ${FQDN}

{{- if .Values.certManager.enabled }}
          cp "${NIFI_HOME}/tls/cert-${ORDINAL_NUMBER}/keystore.jks" "${NIFI_HOME}/tls/keystore.jks"
          cp "${NIFI_HOME}/tls/cert-${ORDINAL_NUMBER}/truststore.jks" "${NIFI_HOME}/tls/truststore.jks"

          prop_replace nifi.security.keystore "${NIFI_HOME}/tls/keystore.jks"
          prop_replace nifi.security.keystoreType JKS
          prop_replace nifi.security.keystorePasswd "${CERT_MANAGER_STORE_PASSWORD}"
          prop_replace nifi.security.truststore "${NIFI_HOME}/tls/truststore.jks"
          prop_replace nifi.security.truststoreType JKS
          prop_replace nifi.security.truststorePasswd "${CERT_MANAGER_STORE_PASSWORD}"

          prop_replace nifi.web.https.host "$(hostname).{{ template "apache-nifi.fullname" $ }}-headless.{{ $.Release.Namespace }}.svc.{{ $.Values.certManager.clusterDomain }}"
          prop_replace nifi.cluster.node.address "$(hostname).{{ template "apache-nifi.fullname" $ }}-headless.{{ $.Release.Namespace }}.svc.{{ $.Values.certManager.clusterDomain }}"
          prop_replace nifi.web.https.network.interface.default eth0
          prop_replace nifi.web.https.network.interface.lo lo
          prop_replace nifi.web.http.host ""
          prop_replace nifi.web.http.port ""

          prop_replace nifi.security.autoreload.enabled true
          prop_replace nifi.security.autoreload.interval "{{ .Values.certManager.refreshSeconds }} secs"
{{- /* if .Values.certManager.enabled */}}{{ end }}

{{- if .Values.properties.safetyValve }}
  {{- range $prop, $val := .Values.properties.safetyValve }}
          prop_replace {{ $prop }} "{{ $val }}" nifi.properties
  {{- end }}
{{- end }}

        {{- if .Values.properties.forceSensitiveKeyChange }}
          {{- if .Values.properties.sensitiveKeyPrior }}
            prop_replace nifi.sensitive.props.key {{ .Values.properties.sensitiveKeyPrior | quote }}
          {{- else }}
            prop_replace nifi.sensitive.props.key ""
          {{- end }}
            bin/nifi.sh set-sensitive-properties-key {{ .Values.properties.sensitiveKey | quote }}
        {{- end }}

        {{- if .Values.properties.forceAlgorithmChange }}
            prop_replace nifi.sensitive.props.algorithm {{ .Values.properties.algorithmPrior | quote }}
            bin/nifi.sh set-sensitive-properties-algorithm {{ .Values.properties.algorithm | quote }}
        {{- end }}

          for f in "${NIFI_HOME}/conf/authorizers.xml" "${NIFI_HOME}/conf/login-identity-providers.xml" ${NIFI_HOME}/conf/nifi.properties
          do
            echo === $f ===
            cat $f
          done
          echo === end of files ===

          function prop () {
            target_file=${NIFI_HOME}/conf/nifi.properties
            egrep "^${1}=" ${target_file} | cut -d'=' -f2
          }

          function offloadNode() {
              FQDN=$(hostname -f)
              echo "disconnecting node '$FQDN'"
              baseUrl={{ $containerPortName }}://${FQDN}:{{ $containerPort }}

              {{- if eq (include "apache-nifi.isInternalSecure" .) "true" }}
              echo "keystoreType=$(prop nifi.security.keystoreType)" > secure.properties
              echo "keystore=$(prop nifi.security.keystore)" >> secure.properties
              echo "keystorePasswd=$(prop nifi.security.keystorePasswd)" >> secure.properties
              echo "truststoreType=$(prop nifi.security.truststoreType)" >> secure.properties
              echo "truststore=$(prop nifi.security.truststore)" >> secure.properties
              echo "truststorePasswd=$(prop nifi.security.truststorePasswd)" >> secure.properties
              echo "proxiedEntity={{ .Values.auth.admin }}" >> secure.properties

              secureArgs="-p secure.properties"
              {{- else }}
              secureArgs=""
              {{- end }}

              echo baseUrl ${baseUrl}
              echo "gracefully disconnecting node '$FQDN' from cluster"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
              nnid=$(jq --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .nodeId' nodes.json)
              echo "disconnecting node ${nnid}"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi disconnect-node -nnid $nnid -u ${baseUrl} ${secureArgs}
              echo ""
              echo "get a connected node"
              connectedNode=$(jq -r 'first(.cluster.nodes|=sort_by(.address)| .cluster.nodes[] | select(.status=="CONNECTED")) | .address' nodes.json)
              baseUrl={{ $containerPortName }}://${connectedNode}:{{ $containerPort }}
              echo baseUrl ${baseUrl}
              echo ""
              echo "wait until node has state 'DISCONNECTED'"
              while [[ "${node_state}" != "DISCONNECTED" ]]; do
                  sleep 1
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                  echo "state is '${node_state}'"
              done
              echo ""
              echo "node '${nnid}' was disconnected"
              echo "offloading node"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi offload-node -nnid $nnid -u ${baseUrl} ${secureArgs}
              echo ""
              echo "wait until node has state 'OFFLOADED'"
              while [[ "${node_state}" != "OFFLOADED" ]]; do
                  sleep 1
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                  echo "state is '${node_state}'"
              done
          }

          deleteNode() {
              echo "deleting node"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi delete-node -nnid ${nnid} -u ${baseUrl} ${secureArgs}
              echo "node deleted"
          }

          executeTrap() {
             echo Received trapped signal, beginning shutdown...;
{{- if .Values.properties.isNode }}
             offloadNode;
{{- end }}
             ./bin/nifi.sh stop;
{{- if .Values.properties.isNode }}
             deleteNode;
{{- end }}
             exit 0;
          }

          trap executeTrap TERM HUP INT;
          trap ":" EXIT

          exec bin/nifi.sh run & nifi_pid="$!"
          echo NiFi running with PID ${nifi_pid}.
          wait ${nifi_pid}

        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - containerPort: {{ $containerPort }}
{{- if .Values.sts.hostPort }}
          hostPort: {{ .Values.sts.hostPort }}
{{- end }}
          name: {{ $containerPortName }}
          protocol: TCP
        - containerPort: {{ .Values.properties.clusterPort }}
          name: cluster
          protocol: TCP
{{- if .Values.containerPorts  }}
{{ toYaml .Values.containerPorts | indent 8 }}
{{- end }}
        env:
        {{- if .Values.certManager.enabled }}
        - name: ORDINAL_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
        - name: CERT_MANAGER_STORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.certManager.jks.secretName }}
              key: {{ .Values.certManager.jks.secretKey }}
        {{- end }}
        - name: NIFI_ZOOKEEPER_CONNECT_STRING
          value: {{ template "zookeeper.url" . }}
{{- if and (not (or (.Values.auth.ldap.enabled) (.Values.auth.oidc.enabled))) (eq (include "apache-nifi.isInternalSecure" .) "true") }}
        - name: NIFI_WEB_HTTPS_HOST
          value: 0.0.0.0
{{- end }}
{{- if .Values.env }}
{{ toYaml .Values.env | indent 8 }}
{{- end }}
{{- if .Values.envFrom }}
        envFrom:
{{ toYaml .Values.envFrom | indent 8 }}
{{- end }}
{{- if .Values.postStart }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", {{ .Values.postStart | quote }}]
{{- end }}
{{- if .Values.properties.isNode }}
        readinessProbe:
{{- if not .Values.sts.startupProbe.enabled  }}
          initialDelaySeconds: 60
{{- end }}
          periodSeconds: 20
          tcpSocket:
            port: {{ $containerPort }}
{{- end }}
{{- if .Values.sts.startupProbe.enabled }}
        startupProbe:
          failureThreshold: {{ .Values.sts.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.sts.startupProbe.periodSeconds }}
          tcpSocket:
            port: {{ $containerPort }}
{{- end }}
        livenessProbe:
{{- if not .Values.sts.startupProbe.enabled }}
          initialDelaySeconds: {{ .Values.sts.livenessProbe.initialDelaySeconds }}
{{- end }}
          periodSeconds: {{ .Values.sts.livenessProbe.periodSeconds }}
          tcpSocket:
            port: {{ $containerPort }}
        volumeMounts:
          - mountPath: /opt/nifi/nifi-current/logs
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: logs
            {{- else }}
            name: "logs"
            {{- end }}
          - mountPath: /opt/nifi/data
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: data
            {{- else }}
            name: "data"
            {{- end }}
          - mountPath: /opt/nifi/nifi-current/auth-conf/
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: auth-conf
            {{- else }}
            name: "auth-conf"
            {{- end }}
          - mountPath: /opt/nifi/nifi-current/config-data
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: config-data
            {{- else }}
            name: "config-data"
            {{- end }}
          - mountPath: /opt/nifi/flowfile_repository
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: flowfile-repository
            {{- else }}
            name: "flowfile-repository"
            {{- end }}
          - mountPath: /opt/nifi/content_repository
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: content-repository
            {{- else }}
            name: "content-repository"
            {{- end }}
          - mountPath: /opt/nifi/provenance_repository
            {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
            name: {{ .Values.persistence.subPath.name }}
            subPath: provenance-repository
            {{- else }}
            name: "provenance-repository"
            {{- end }}
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.properties.temp
            subPath: "nifi.properties"
          - name: "authorizers-xml"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.xml.temp
            subPath: "authorizers.xml"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "login-identity-providers-custom-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers-custom.xml
            subPath: "login-identity-providers-custom.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
          - name: "logback-xml"
            mountPath: /opt/nifi/nifi-current/conf/logback.xml
            subPath: "logback.xml"
          - name: "flow-content"
            mountPath: /opt/nifi/nifi-init/flow.json
            subPath: "flow.json"
          {{- range $secret := .Values.secrets }}
            {{- if $secret.mountPath }}
              {{- if $secret.keys }}
                {{- range $key := $secret.keys }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}/{{ $key }}
            subPath: {{ $key }}
            readOnly: true
                {{- end }}
              {{- else }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- range $configmap := .Values.configmaps }}
            {{- if $configmap.mountPath }}
              {{- if $configmap.keys }}
                {{- range $key := $configmap.keys }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $configmap.name }}
            mountPath: {{ $configmap.mountPath }}/{{ $key }}
            subPath: {{ $key }}
            readOnly: true
                {{- end }}
              {{- else }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $configmap.name }}
            mountPath: {{ $configmap.mountPath }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.certManager.enabled }}
          {{- range untilStep 0 (int .Values.replicaCount) 1 }}
          - name: {{ include "apache-nifi.fullname" $ }}-cert-{{ . }}
            mountPath: /opt/nifi/nifi-current/tls/cert-{{ . }}
            readOnly: true
          {{- end }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 10 }}
          {{- end }}
      - name: app-log
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args:
          - /bin/sh
          - -c
          - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-app.log & wait $!
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - mountPath: /var/log
          {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
          name: {{ .Values.persistence.subPath.name }}
          subPath: logs
          {{- else }}
          name: "logs"
          {{- end }}
      - name: bootstrap-log
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args:
          - /bin/sh
          - -c
          - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-bootstrap.log & wait $!
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - mountPath: /var/log
          {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
          name: {{ .Values.persistence.subPath.name }}
          subPath: logs
          {{- else }}
          name: "logs"
          {{- end }}
      - name: user-log
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args:
          - /bin/sh
          - -c
          - trap "exit 0" TERM; tail -n+1 -F /var/log/nifi-user.log & wait $!
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - mountPath: /var/log
          {{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
          name: {{ .Values.persistence.subPath.name }}
          subPath: logs
          {{- else }}
          name: "logs"
          {{- end }}
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "nifi.properties"
              path: "nifi.properties"
      - name: "authorizers-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.xml"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "login-identity-providers-custom-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "login-identity-providers-custom.xml"
              path: "login-identity-providers-custom.xml"
      - name: "state-management-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "zookeeper-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
      - name: "logback-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "logback.xml"
              path: "logback.xml"
      - name: "flow-content"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "flow.json"
              path: "flow.json"
{{- if .Values.certManager.enabled }}
      {{- range untilStep 0 (int .Values.replicaCount) 1 }}
      - name: {{ include "apache-nifi.fullname" $ }}-cert-{{ . }}
        secret:
          secretName: {{ include "apache-nifi.fullname" $ }}-cert-{{ . }}
      {{- end }}
{{- /* if .Values.certManager.enabled */}}{{ end }}
      {{- range .Values.secrets }}
      - name: {{ include "apache-nifi.fullname" $ }}-{{ .name }}
        secret:
          secretName: {{ .name }}
      {{- end }}
      {{- range .Values.configmaps }}
      - name: {{ include "apache-nifi.fullname" $ }}-{{ .name }}
        configMap:
          name: {{ .name }}
      {{- end }}
{{- if not .Values.persistence.enabled }}
      - name: config-data
        emptyDir: {}
      - name: auth-conf
        emptyDir: {}
      - name: data
        emptyDir: {}
      - name: flowfile-repository
        emptyDir: {}
      - name: content-repository
        emptyDir: {}
      - name: provenance-repository
        emptyDir: {}
      - name: logs
        emptyDir: {}
{{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 6 }}
{{- end }}
{{- if and .Values.persistence.enabled .Values.persistence.subPath.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.persistence.subPath.name }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.subPath.size }}
{{- end }}
{{- if and .Values.persistence.enabled (not .Values.persistence.subPath.enabled) }}
  volumeClaimTemplates:
    - metadata:
        name: logs
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.logStorage.size }}
    - metadata:
        name: "config-data"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.configStorage.size }}
    - metadata:
        name: data
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.dataStorage.size }}
    - metadata:
        name: flowfile-repository
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.flowfileRepoStorage.size }}
    - metadata:
        name: content-repository
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.contentRepoStorage.size }}
    - metadata:
        name: provenance-repository
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.provenanceRepoStorage.size }}
    - metadata:
        name: auth-conf
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.authconfStorage.size }}
{{- end }}
